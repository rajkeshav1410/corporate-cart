// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String      @unique
  password  String
  role      Role        @default(USER)
  inventory Inventory[]
  avatar    String
  coin      Float       @default(1000)

  sellerTransaction Transaction[] @relation(name: "sellerRelation")
  buyerTransaction  Transaction[] @relation(name: "buyerRelation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  itemName         String
  itemDescription  String
  category         String
  inventoryImageId String?
  price            Float
  User             User?         @relation(fields: [userId], references: [id])
  userId           String?       @db.ObjectId
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  saleTransaction  Transaction[] @relation(name: "saleInventoryToTransaction")
  tradeTransaction Transaction[] @relation(name: "tradeInventoryToTransaction")
}

model Transaction {
  id     String            @id @default(auto()) @map("_id") @db.ObjectId
  type   TransactionType
  status TransactionStatus
  coin   Float?

  seller   User    @relation(name: "sellerRelation", fields: [sellerId], references: [id])
  sellerId String  @db.ObjectId
  buyer    User?   @relation(name: "buyerRelation", fields: [buyerId], references: [id])
  buyerId  String? @db.ObjectId

  saleInventory    Inventory  @relation(name: "saleInventoryToTransaction", fields: [saleInventoryId], references: [id])
  saleInventoryId  String     @db.ObjectId
  tradeInventory   Inventory? @relation(name: "tradeInventoryToTransaction", fields: [tradeInventoryId], references: [id])
  tradeInventoryId String?    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tradeInventoryId], name: "NoUniqueConstraintsOnTradeInventoryId")
}

enum Role {
  ADMIN
  USER
}

enum TransactionType {
  SALE_BUY
  TRADE
}

enum TransactionStatus {
  ONSALE
  PENDING
  COMPLETED
  REJECTED
}
